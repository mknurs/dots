" disable strange defaults
if &compatible
  set nocompatible
endif
let skip_defaults_vim=1

" runtimepath
let myvimruntime = expand($MYVIMRUNTIME)
set rtp-=$HOME/.vim
"let &rtp=myvimruntime
let &rtp=myvimruntime . ',' . $VIMRUNTIME

" viminfo
set viminfo=

" set mapleader to space
nnoremap <SPACE> <Nop>
let mapleader = "\<Space>"

" colorscheme
colorscheme mknurs

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" terminal
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" fast terminal connection
set ttyfast
" force utf-8 encoding
set encoding=utf-8
" set window title by default
set title
" fix timeoutlens when escaping insert mode
autocmd InsertEnter * set timeoutlen=0
autocmd InsertLeave * set timeoutlen=1000

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cursor
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tabs, indents, wrap
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set noautoindent
set nowrap

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" statusline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:word_count=wordcount().words
let g:char_count=wordcount().chars
function WordCount()
  if has_key(wordcount(),'visual_words')
    let g:word_count=wordcount().visual_words."/".wordcount().words " count selected words
    let g:char_count=wordcount().visual_chars."/".wordcount().chars
  else
    let g:word_count=wordcount().cursor_words."/".wordcount().words " or shows words 'so far'
    let g:char_count=wordcount().cursor_chars."/".wordcount().chars
  endif
  return "w: ".g:word_count.", c: ".g:char_count
endfunction

set laststatus=2
set statusline=%f\ %h%m%r\ %{WordCount()}%=%l,%c%V\ %P

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" navigating
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 8 lines above or below the cursor when scrolling
" 5 columns next to the cursor when scrolling horizontally
set scrolloff=8
set sidescrolloff=5
" show line numbers on the sidebar
set number
set relativenumber
" color 72th column
set colorcolumn=72

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ignore case when searching
" don't ignore case when search has capital letter
" enable highlighted case-sensitive incremential search
set ignorecase
set smartcase
set incsearch

" auto center on matched string
noremap n nzz
noremap N Nzz

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" windows
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" always focus on splited window
set splitright
set splitbelow

" remap <C-w> to conditionally split or switch buffer
noremap <silent> <expr> <C-w> winnr('$') == 1 ? '<Esc>:vnew<cr>' : '<C-w><C-w>'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" yanking, pasting, clipboard
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" wayland support
if $XDG_SESSION_TYPE == "wayland"
  augroup wayland_clipboard
    au!
    au TextYankPost * if v:event.visual | call system("wl-copy", @") | endif
  augroup END
  nnoremap p :let @"=system("wl-paste -n")<CR>:put "=<CR>
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" markdown
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType markdown setlocal textwidth=72
autocmd FileType markdown setlocal nojoinspaces

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-plug
let vimplug = myvimruntime . '/autoload/plug.vim'
if empty(glob(vimplug))
  silent execute '!curl -fLo ' . vimplug . ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

let plugged = myvimruntime . '/plugged/'
" plugins
call plug#begin(plugged)
  Plug 'sheerun/vim-polyglot'
call plug#end()

