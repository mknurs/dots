" disable strange defaults
if &compatible | set nocompatible | endif

" set mapleader to space
nnoremap <SPACE> <Nop>
let mapleader = "\<Space>"

" colorscheme
colorscheme ron

" don't parse modelines
set nomodeline

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" terminal
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" terminal colors
set t_Co=16

" fast terminal connection
set ttyfast

" force utf-8 encoding
set encoding=utf-8

" set window title by default
set title

" alacritty dumb fix
map <ESC>[1;5A <C-Up>
map <ESC>[1;5B <C-Down>
map <ESC>[1;5C <C-Right>
map <ESC>[1;5D <C-Left>
imap <ESC>[1;5A <C-Up>
imap <ESC>[1;5B <C-Down>
imap <ESC>[1;5C <C-Right>
imap <ESC>[1;5D <C-Left>
map <ESC>[1;3A <A-Up>
map <ESC>[1;3B <A-Down>
map <ESC>[1;3C <A-Right>
map <ESC>[1;3D <A-Left>
imap <ESC>[1;3A <A-Up>
imap <ESC>[1;3B <A-Down>
imap <ESC>[1;3C <A-Right>
imap <ESC>[1;3D <A-Left>
map <ESC>[1;2A <S-Up>
map <ESC>[1;2B <S-Down>
map <ESC>[1;2C <S-Right>
map <ESC>[1;2D <S-Left>
imap <ESC>[1;2A <S-Up>
imap <ESC>[1;2B <S-Down>
imap <ESC>[1;2C <S-Right>
imap <ESC>[1;2D <S-Left>

" fix timeoutlens when escaping insert mode
:autocmd InsertEnter * set timeoutlen=0
:autocmd InsertLeave * set timeoutlen=1000

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cursor
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tabs, indents, wrap
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set noautoindent
set nowrap

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" statusline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:word_count=wordcount().words
let g:char_count=wordcount().chars
function WordCount()
  if has_key(wordcount(),'visual_words')
    let g:word_count=wordcount().visual_words."/".wordcount().words " count selected words
    let g:char_count=wordcount().visual_chars."/".wordcount().chars
  else
    let g:word_count=wordcount().cursor_words."/".wordcount().words " or shows words 'so far'
    let g:char_count=wordcount().cursor_chars."/".wordcount().chars
  endif
  return "w: ".g:word_count.", c: ".g:char_count
endfunction

set laststatus=2
set statusline=%f\ %h%m%r\ %{WordCount()}%=%l,%c%V\ %P

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" navigating
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 8 lines above or below the cursor when scrolling
" 5 columns next to the cursor when scrolling horizontally
set scrolloff=8
set sidescrolloff=5

" highlight line under cursor
set cursorline
set cursorlineopt=number

" show line numbers on the sidebar
set number
set relativenumber

" color 72th column
set colorcolumn=72


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ignore case when searching
" don't ignore case when search has capital letter
" enable highlighted case-sensitive incremential search
set ignorecase
set smartcase
set incsearch

" auto center on matched string
noremap n nzz
noremap N Nzz

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" windows
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" always focus on splited window
set splitright
set splitbelow

" remap <C-w> to conditionally split or switch buffer
noremap <silent> <expr> <C-w> winnr('$') == 1 ? '<Esc>:vs .<cr>' : '<C-w><C-w>'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" yanking, pasting, clipboard
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" wayland support
augroup wayland_clipboard
  au!
  au TextYankPost * call system("wl-copy", @")
augroup END
nnoremap p :let @"=system("wl-paste -n")<CR>:put "=<CR>

" Y yanks from the cursor to the end of line
nnoremap Y y$

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" markdown
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType markdown setlocal textwidth=72
autocmd FileType markdown setlocal nojoinspaces

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" undo, swap, read
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set dir and add it to runtimepath
let dir = expand($VIMDIR)
exe 'set rtp+=' . dir

" set swap, undo and backup dirs
let &directory = dir . '/swap/'
let &undodir = dir . '/undo/'
let &backupdir = dir . '/back/'

" auto create dirs for backup and undo files
if !isdirectory(&directory)
  call system("mkdir -p " . &directory)
endif
if !isdirectory(&undodir)
  call system("mkdir -p " . &undodir)
endif
if !isdirectory(&backupdir)
  call system("mkdir -p " . &backupdir)
endif

" enable undofile
set undofile

" change viminfo location
let &viminfofile = dir . '/viminfo'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-plug
let vimplug = dir . '/autoload/plug.vim'
if empty(glob(vimplug))
  silent execute '!curl -fLo ' . vimplug . ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

let plugged = dir . '/plugged/'
"" plugins
call plug#begin(plugged)
  Plug 'sheerun/vim-polyglot'
call plug#end()

